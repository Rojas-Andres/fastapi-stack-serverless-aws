AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Stack Microservices

Parameters:
  Environment:
    Description: Environment in which the resources will be deploy
    Type: String
    Default: development
  SecretKey:
    Description: secret key
    Type: String
    Default: secret_key
  GlobalTimeout:
    Description: Global timeout
    Type: Number
    Default: 30
  TokenExpiration:
    Description: Token expiration
    Type: Number
    Default: 60
  AuthorizerTimeout:
    Description: Authorizer timeout
    Type: Number
    Default: 30
  DynamoTableName:
    Description: Dynamo table name
    Type: String
  AuthorizerArn:
    Description: Authorizer Arn
    Type: String
  SQSBatchSize:
    Description: sqs batch size
    Type: String
    Default: 5
  StackName:
    Description: stack Name
    Type: String
    Default: stack-stack-name
  SendGridApiKey:
    Description: Send Grid Api Key
    Type: String
    Default: SendGridApiKey
Globals:
  Function:
    Timeout: !Ref GlobalTimeout
    Tracing: Active
    MemorySize: 256
    Handler: app.handler
    Runtime: python3.12
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:

  LayerShared:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Layer for Data Ingestor
      ContentUri: ../shared
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: makefile

  Api:
    Type: AWS::Serverless::Api
    Name: !Sub api-${StackName}-${Environment}
    Properties:
      TracingEnabled: true
      StageName: !Ref Environment
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
      GatewayResponses:
        DEFAULT_4XX:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: "{ \"error\": { \"code\": \"custom-401-unauthorized\", \"message\": $context.error.messageString }, \"requestId\": \"$context.requestId\" }"
        ACCESS_DENIED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: "{ \"error\": { \"code\": \"custom-401-access-denied\", \"message\": $context.error.messageString }, \"requestId\": \"$context.requestId\" }"
        INVALID_API_KEY:
          StatusCode: 401
          ResponseTemplates:
            application/json: "{ \"error\": { \"code\": \"custom-401-invalid-api-key\", \"message\": $context.error.messageString }, \"requestId\": \"$context.requestId\" }"
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: "{ \"error\": { \"code\": \"custom-401-missing-token\", \"message\": $context.error.messageString }, \"requestId\": \"$context.requestId\" }"
        EXPIRED_TOKEN:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: "{ \"error\": { \"code\": \"custom-401-expired-token\", \"message\": $context.error.messageString }, \"requestId\": \"$context.requestId\" }"
        AUTHORIZER_CONFIGURATION_ERROR:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: "{ \"error\": { \"code\": \"custom-401-auth-config-error\", \"message\": $context.error.messageString }, \"requestId\": \"$context.requestId\" }"
        AUTHORIZER_FAILURE:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: "{ \"error\": { \"code\": \"custom-401-authorizer-failed\", \"message\": $context.error.messageString }, \"requestId\": \"$context.requestId\" }"
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !Ref AuthorizerArn

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/auth
      FunctionName: !Sub auth-${StackName}-${Environment}
      Description: !Sub Auth microservice «${Environment}»
      Environment:
        Variables:
          FUNCTION_NAME: !Sub auth-${StackName}-${Environment}
          TOKEN_EXPIRATION: !Ref TokenExpiration
      Policies:
        - AmazonDynamoDBFullAccess
        - VPCAccessPolicy : {}
      Layers:
        - !Ref LayerShared
      Events:
        validateAuth:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/health
            Method: GET
            Auth:
              Authorizer: NONE
        Singin:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/signin
            Method: POST
            Auth:
              Authorizer: NONE
        Singup:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/signup
            Method: POST
            Auth:
              Authorizer: NONE
        Social:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/social
            Method: POST
            Auth:
              Authorizer: NONE
        SocialRegister:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/social/register
            Method: POST
  # NotificationFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: modules/notifications
  #     FunctionName: !Sub notifications-${StackName}-${Environment}
  #     Description: !Sub notifications «${Environment}»
  #     Timeout: !Ref AuthorizerTimeout
  #     Policies:
  #       - SQSPollerPolicy:
  #           QueueName: !GetAtt SqsQueue.QueueName
  #       - VPCAccessPolicy : {}
  #     Events:
  #       SQSEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt SqsQueue.Arn
  #           BatchSize: !Ref SQSBatchSize

  # SqsQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: !Sub sqs-queue-${StackName}-${Environment}
  #     VisibilityTimeout: !Ref AuthorizerTimeout


Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region
  MyApi:
    Value: !Ref Api
  ApiUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Description: URL de la API
